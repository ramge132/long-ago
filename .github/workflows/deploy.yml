name: Deploy to EC2

on:
  push:
    branches:
      - main
      # - FE/dev
      # - BE/dev

jobs:
  # =======================================================
  # JOB 1: Build and Push Docker images
  # =======================================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get commit SHA
        id: get_sha
        run: echo "sha=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      # --- Determine Variables ---
      - name: Set Environment Variables
        id: set_vars
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "FE_IMAGE_NAME=${{ secrets.IMAGE_FE_MAIN }}" >> $GITHUB_OUTPUT
            echo "BE_IMAGE_NAME=${{ secrets.IMAGE_BE_MAIN }}" >> $GITHUB_OUTPUT
            echo "AI_IMAGE_NAME=${{ secrets.AI_IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "SERVER_URL=${{ secrets.VITE_MAIN_API_SERVER_URL_MAIN }}" >> $GITHUB_OUTPUT
            echo "DOCKER_USER=${{ secrets.DOCKERHUB_USERNAME_MAIN }}" >> $GITHUB_OUTPUT
            echo "DOCKER_PASS=${{ secrets.DOCKERHUB_PASSWORD_MAIN }}" >> $GITHUB_OUTPUT
          else
            echo "FE_IMAGE_NAME=${{ secrets.IMAGE_FE }}" >> $GITHUB_OUTPUT
            echo "BE_IMAGE_NAME=${{ secrets.IMAGE_BE }}" >> $GITHUB_OUTPUT
            echo "AI_IMAGE_NAME=${{ secrets.AI_IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "SERVER_URL=${{ secrets.VITE_MAIN_API_SERVER_URL }}" >> $GITHUB_OUTPUT
            echo "DOCKER_USER=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_OUTPUT
            echo "DOCKER_PASS=${{ secrets.DOCKERHUB_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

      # --- Front-End Build ---
      - name: Create FE .env file
        working-directory: ./FE
        run: |
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" > .env
          echo "VITE_MAIN_API_SERVER_URL=${{ steps.set_vars.outputs.SERVER_URL }}" >> .env
          echo "VITE_TURN_SERVER_URL=${{ secrets.VITE_TURN_SERVER_URL }}" >> .env
          echo "VITE_TURN_ID=${{ secrets.VITE_TURN_ID }}" >> .env
          echo "VITE_TURN_PW=${{ secrets.VITE_TURN_PW }}" >> .env
          echo "VITE_USERS=${{ secrets.VITE_USERS }}" >> .env
          echo "VITE_USERS_SIGNIN=${{ secrets.VITE_USERS_SIGNIN }}" >> .env
          echo "VITE_GAME=${{ secrets.VITE_GAME }}" >> .env
          echo "VITE_GAME_SHUFFLE=${{ secrets.VITE_GAME_SHUFFLE }}" >> .env
          echo "VITE_SCENE=${{ secrets.VITE_SCENE }}" >> .env
          echo "VITE_SCENE_FILTERING=${{ secrets.VITE_SCENE_FILTERING }}" >> .env
          echo "VITE_SCENE_VOTE=${{ secrets.VITE_SCENE_VOTE }}" >> .env
          
      - name: Build FE Docker Image
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'FE/')
        run: |
          echo "Building FE Docker image..."
          docker build --no-cache -f ./FE/Dockerfile -t ${{ steps.set_vars.outputs.FE_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }} ./FE
          echo "Tagging FE image as latest..."
          docker tag ${{ steps.set_vars.outputs.FE_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }} ${{ steps.set_vars.outputs.FE_IMAGE_NAME }}:latest
          echo "FE Docker image build completed!"

      # --- Back-End Build ---
      - name: Build BE Docker Image
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'BE/')
        run: |
          docker build --no-cache -f ./BE/Dockerfile -t ${{ steps.set_vars.outputs.BE_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }} ./BE
          docker tag ${{ steps.set_vars.outputs.BE_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }} ${{ steps.set_vars.outputs.BE_IMAGE_NAME }}:latest

      # --- AI Service Build ---
      - name: Build AI Docker Image
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'AI/')
        run: |
          docker build --no-cache -f ./AI/Dockerfile -t ${{ steps.set_vars.outputs.AI_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }} ./AI
          docker tag ${{ steps.set_vars.outputs.AI_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }} ${{ steps.set_vars.outputs.AI_IMAGE_NAME }}:latest

      # --- Push to DockerHub ---
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.set_vars.outputs.DOCKER_USER }}
          password: ${{ steps.set_vars.outputs.DOCKER_PASS }}

      - name: Push FE Image
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'FE/')
        timeout-minutes: 20
        run: |
          echo "Pushing FE image with SHA tag..."
          for i in {1..3}; do
            if docker push ${{ steps.set_vars.outputs.FE_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }}; then
              echo "SHA tag push successful"
              break
            else
              echo "SHA tag push failed (attempt $i/3), retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "Pushing FE image with latest tag..."
          for i in {1..3}; do
            if docker push ${{ steps.set_vars.outputs.FE_IMAGE_NAME }}:latest; then
              echo "Latest tag push successful"
              break
            else
              echo "Latest tag push failed (attempt $i/3), retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "FE image push completed successfully!"

      - name: Push BE Image
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'BE/')
        timeout-minutes: 20
        run: |
          echo "Pushing BE image with SHA tag..."
          docker push ${{ steps.set_vars.outputs.BE_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }}
          echo "Pushing BE image with latest tag..."
          docker push ${{ steps.set_vars.outputs.BE_IMAGE_NAME }}:latest
          echo "BE image push completed successfully!"

      - name: Push AI Image
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'AI/')
        timeout-minutes: 20
        run: |
          echo "Pushing AI image with SHA tag..."
          docker push ${{ steps.set_vars.outputs.AI_IMAGE_NAME }}:${{ steps.get_sha.outputs.sha }}
          echo "Pushing AI image with latest tag..."
          docker push ${{ steps.set_vars.outputs.AI_IMAGE_NAME }}:latest
          echo "AI image push completed successfully!"

  # =======================================================
  # JOB 2: Deploy to Server
  # =======================================================
  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Main Server
        if: github.ref_name == 'main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.MAIN_SERVER_URI }}
          username: ubuntu
          key: ${{ secrets.MAIN_SERVER_KEY }}
          script: |
            echo "FE_IMAGE_NAME=${{ secrets.IMAGE_FE_MAIN }}" > .env
            echo "BE_IMAGE_NAME=${{ secrets.IMAGE_BE_MAIN }}" >> .env
            echo "AI_IMAGE_NAME=${{ secrets.AI_IMAGE_NAME }}" >> .env
            echo "DB_URL_MAIN=${{ secrets.DB_URL_MAIN }}" >> .env
            echo "DB_DRIVER_MAIN=${{ secrets.DB_DRIVER }}" >> .env
            echo "DB_USERNAME_MAIN=${{ secrets.DB_USERNAME_MAIN }}" >> .env
            echo "DB_PASSWORD_MAIN=${{ secrets.DB_PASSWORD_MAIN }}" >> .env
            echo "REDIS_HOST_MAIN=${{ secrets.REDIS_HOST }}" >> .env
            echo "WEBCLIENT_BASE_URL=${{ secrets.WEBCLIENT_BASE_URL }}" >> .env
            echo "WEBCLIENT_BASE_URL0=${{ secrets.WEBCLIENT_BASE_URL }}" >> .env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
            echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
            echo "S3_CREDENTIALS_ACCESS_KEY=${{ secrets.S3_CREDENTIALS_ACCESS_KEY }}" >> .env
            echo "S3_CREDENTIALS_SECRET_KEY=${{ secrets.S3_CREDENTIALS_SECRET_KEY }}" >> .env
            echo "RUNPOD_API_KEY=${{ secrets.RUNPOD_API_KEY }}" >> .env
            echo "RUNPOD_ENDPOINT_ID=${{ secrets.RUNPOD_ENDPOINT_ID }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
            echo "TTS_API_KEY=${{ secrets.TTS_API_KEY }}" >> .env
            
            cd infra
            docker compose down
            docker rmi $(docker images -q) || true
            docker compose up -d

      # - name: Deploy to Test Server
      #   if: startsWith(github.ref_name, 'FE/') || startsWith(github.ref_name, 'BE/')
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.TEST_SERVER_URI }}
      #     username: ubuntu
      #     key: ${{ secrets.TEST_SERVER_KEY }}
      #     script: |
      #       echo "DB_URL=${{ secrets.DB_URL_TEST }}" > .env
      #       echo "DB_DRIVER=${{ secrets.DB_DRIVER }}" >> .env
      #       echo "DB_USERNAME=${{ secrets.DB_USERNAME_TEST }}" >> .env
      #       echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_TEST }}" >> .env
      #       echo "REDIS_HOST=${{ secrets.REDIS_HOST_TEST }}" >> .env
      #       echo "WEBCLIENT_BASE_URL=${{ secrets.WEBCLIENT_BASE_URL }}" >> .env
      #       echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
      #       echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
      #       echo "S3_CREDENTIALS_ACCESS_KEY=${{ secrets.S3_CREDENTIALS_ACCESS_KEY }}" >> .env
      #       echo "S3_CREDENTIALS_SECRET_KEY=${{ secrets.S3_CREDENTIALS_SECRET_KEY }}" >> .env

      #       docker compose down
      #       docker rmi $(docker images -q) || true
      #       docker compose up -d
